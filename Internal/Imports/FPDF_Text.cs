using Pdfium.NET.Internal.Types;
using System.Runtime.InteropServices;

namespace Pdfium.NET.Internal.Imports
{
    internal static class FPDF_Text
    {
        /// <summary>
        /// Prepare information about all characters in a page.
        /// Application must call FPDFText_ClosePage to release the text page information.
        /// </summary>
        /// <param name="page">Handle to the page. Returned by FPDF_LoadPage function (in FPDFVIEW module).</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page);

        /// <summary>
        /// Release all resources allocated for a text page information structure.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        [DllImport("pdfium.dll")]
        public static extern void FPDFText_ClosePage(FPDF_TEXTPAGE text_page);

        /// <summary>
        /// Get number of characters in a page.
        /// Characters in a page form a "stream", inside the stream, each character has an index.
        /// We will use the index parameters in many of FPDFTEXT functions. The first character in the page has an index value of zero.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_CountChars(FPDF_TEXTPAGE text_page);

        /// <summary>
        /// Get Unicode of a character in a page.
        /// The Unicode of the particular character.
        /// If a character is not encoded in Unicode and Foxit engine can't convert to Unicode, the return value will be zero.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        [return: MarshalAs(UnmanagedType.U4)]
        public static extern char FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index);

        /// <summary>
        /// Get if a character in a page is generated by PDFium.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_IsGenerated(FPDF_TEXTPAGE text_page, int index);

        /// <summary>
        /// Get if a character in a page has an invalid unicode mapping.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_HasUnicodeMapError(FPDF_TEXTPAGE text_page, int index);

        /// <summary>
        /// Get the font size of a particular character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index);

        /// <summary>
        /// Get the font name and flags of a particular character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <param name="buffer">A buffer receiving the font name.</param>
        /// <param name="buflen">The length of <paramref name="buffer"/> in bytes.</param>
        /// <param name="flags">Optional pointer to an int receiving the font flags. These flags should be interpreted per PDF spec 1.7 Section 5.7.1 Font Descriptor Flags.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern double FPDFText_GetFontInfo(FPDF_TEXTPAGE text_page, int index, ref byte buffer, int buflen, int flags);

        /// <summary>
        /// Get the font weight of a particular character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index);

        /// <summary>
        /// Get text rendering mode of character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode(FPDF_TEXTPAGE text_page, int index);

        /// <summary>
        /// Get the fill color of a particular character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <param name="R">Pointer to an unsigned int number receiving the red value of the fill color.</param>
        /// <param name="G">Pointer to an unsigned int number receiving the green value of the fill color.</param>
        /// <param name="B">Pointer to an unsigned int number receiving the blue value of the fill color.</param>
        /// <param name="A">Pointer to an unsigned int number receiving the alpha value of the fill color.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_GetFillColor(FPDF_TEXTPAGE text_page, int index, out int R, out int G, out int B, out int A);

        /// <summary>
        /// Get the stroke color of a particular character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <param name="R">Pointer to an unsigned int number receiving the red value of the fill color.</param>
        /// <param name="G">Pointer to an unsigned int number receiving the green value of the fill color.</param>
        /// <param name="B">Pointer to an unsigned int number receiving the blue value of the fill color.</param>
        /// <param name="A">Pointer to an unsigned int number receiving the alpha value of the fill color.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_GetStrokeColor(FPDF_TEXTPAGE text_page, int index, out int R, out int G, out int B, out int A);

        /// <summary>
        /// Get character rotation angle.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern float FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index);

        /// <summary>
        /// Get bounding box of a particular character.
        /// All positions are measured in PDF "user space".
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <param name="left">Pointer to a double number receiving left position of the character box.</param>
        /// <param name="right">Pointer to a double number receiving right position of the character box.</param>
        /// <param name="bottom">Pointer to a double number receiving bottom position of the character box.</param>
        /// <param name="top">Pointer to a double number receiving top position of the character box.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top);

        /// <summary>
        /// Get a "loose" bounding box of a particular character, i.e., covering the entire glyph bounds, without taking the actual glyph shape into account.
        /// All positions are measured in PDF "user space".
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <param name="rect">Pointer to a FS_RECTF receiving the character box.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_GetLooseCharBox(FPDF_TEXTPAGE text_page, int index, out FS_RECTF rect);

        /// <summary>
        /// Get the effective transformation matrix for a particular character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <param name="matrix">Pointer to a FS_MATRIX receiving the transformation matrix.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_GetMatrix(FPDF_TEXTPAGE text_page, int index, out FS_MATRIX matrix);

        /// <summary>
        /// Get origin of a particular character.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="index">Zero-based index of the character.</param>
        /// <param name="x">Pointer to a double number receiving x coordinate of the character origin.</param>
        /// <param name="y">Pointer to a double number receiving y coordinate of the character origin.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_GetCharOrigin(FPDF_TEXTPAGE text_page, int index, out double x, out double y);

        /// <summary>
        /// Get the index of a character at or nearby a certain position on the page.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="x">X position in PDF "user space".</param>
        /// <param name="y">Y position in PDF "user space".</param>
        /// <param name="xTolerance">An x-axis tolerance value for character hit detection, in point units.</param>
        /// <param name="yTolerance">An y-axis tolerance value for character hit detection, in point units.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);

        /// <summary>
        /// Extract unicode text string from the page.
        /// This function ignores characters without unicode information.
        /// It returns all characters on the page, even those that are not visible when the page has a cropbox. To filter out the characters outside of the cropbox, use FPDF_GetPageBoundingBox() and FPDFText_GetCharBox().
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="start_index">Index for the start characters.</param>
        /// <param name="count">Number of characters to be extracted.</param>
        /// <param name="result">A buffer (allocated by application) receiving the extracted unicodes. The size of the buffer must be able to hold the number of characters plus a terminator.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result);

        /// <summary>
        /// Counts number of rectangular areas occupied by a segment of text, and caches the result for subsequent FPDFText_GetRect() calls.
        /// This function, along with FPDFText_GetRect can be used by applications to detect the position on the page for a text segment, so proper areas can be highlighted. The FPDFText_* functions will automatically merge small character boxes into bigger one if those characters are on the same line and use same font settings.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="start_index">Index for the start characters.</param>
        /// <param name="count">Number of characters, or -1 for all remaining.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count);

        /// <summary>
        /// Get a rectangular area from the result generated by FPDFText_CountRects.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="rect_index">Zero-based index for the rectangle.</param>
        /// <param name="left">Pointer to a double value receiving the rectangle left boundary.</param>
        /// <param name="top">Pointer to a double value receiving the rectangle top boundary.</param>
        /// <param name="right">Pointer to a double value receiving the rectangle right boundary.</param>
        /// <param name="bottom">Pointer to a double value receiving the rectangle bottom boundary.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom);

        /// <summary>
        /// Extract unicode text within a rectangular boundary on the page.
        /// If the buffer is too small, as much text as will fit is copied into it.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="left">Left boundary.</param>
        /// <param name="top">Top boundary.</param>
        /// <param name="right">Right boundary.</param>
        /// <param name="bottom">Bottom boundary.</param>
        /// <param name="buffer">A unicode buffer.</param>
        /// <param name="buflen">Number of characters (not bytes) for the buffer, excluding an additional terminator.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen);

        /// <summary>
        /// Start a search.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <param name="findwhat">A unicode match pattern.</param>
        /// <param name="flags">Option flags.</param>
        /// <param name="start_index">Start from this character. -1 for end of the page.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index);

        /// <summary>
        /// Search in the direction from page start to end.
        /// </summary>
        /// <param name="handle">A search context handle returned by FPDFText_FindStart.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_FindNext(FPDF_SCHHANDLE handle);

        /// <summary>
        /// Search in the direction from page end to start.
        /// </summary>
        /// <param name="handle">A search context handle returned by FPDFText_FindStart.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFText_FindPrev(FPDF_SCHHANDLE handle);

        /// <summary>
        /// Get the starting character index of the search result.
        /// </summary>
        /// <param name="handle">A search context handle returned by FPDFText_FindStart.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle);

        /// <summary>
        /// Get the number of matched characters in the search result.
        /// </summary>
        /// <param name="handle">A search context handle returned by FPDFText_FindStart.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFText_GetSchCount(FPDF_SCHHANDLE handle);

        /// <summary>
        /// Release a search context.
        /// </summary>
        /// <param name="handle">A search context handle returned by FPDFText_FindStart.</param>
        [DllImport("pdfium.dll")]
        public static extern void FPDFText_FindClose(FPDF_SCHHANDLE handle);

        /// <summary>
        /// Prepare information about weblinks in a page.
        /// Weblinks are those links implicitly embedded in PDF pages. PDF also has a type of annotation called "link" (FPDFTEXT doesn't deal with that kind of link). FPDFTEXT weblink feature is useful for automatically detecting links in the page contents. For example, things like "https://www.example.com" will be detected, so applications can allow user to click on those characters to activate the link, even the PDF doesn't come with link annotations.
        /// FPDFLink_CloseWebLinks must be called to release resources.
        /// </summary>
        /// <param name="text_page">Handle to a text page information structure. Returned by FPDFText_LoadPage function.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page);

        /// <summary>
        /// Count number of detected web links.
        /// </summary>
        /// <param name="link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page);

        /// <summary>
        /// Fetch the URL information for a detected web link.
        /// </summary>
        /// <param name="link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
        /// <param name="link_index">Zero-based index for the link.</param>
        /// <param name="buffer"></param>
        /// <param name="buflen"></param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen);

        /// <summary>
        /// Count number of rectangular areas for the link.
        /// </summary>
        /// <param name="link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
        /// <param name="link_index">Zero-based index for the link.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index);

        /// <summary>
        /// Fetch the boundaries of a rectangle for a link.
        /// </summary>
        /// <param name="link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
        /// <param name="link_index">Zero-based index for the link.</param>
        /// <param name="rect_index">Zero-based index for a rectangle.</param>
        /// <param name="left">Pointer to a double value receiving the rectangle left boundary.</param>
        /// <param name="top">Pointer to a double value receiving the rectangle top boundary.</param>
        /// <param name="right">Pointer to a double value receiving the rectangle right boundary.</param>
        /// <param name="bottom">Pointer to a double value receiving the rectangle bottom boundary.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom);

        /// <summary>
        /// Fetch the start char index and char count for a link.
        /// </summary>
        /// <param name="link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
        /// <param name="link_index">Zero-based index for the link.</param>
        /// <param name="start_char_index">Pointer to int receiving the start char index.</param>
        /// <param name="char_count">Pointer to int receiving the char count.</param>
        /// <returns></returns>
        [DllImport("pdfium.dll")]
        public static extern bool FPDFLink_GetTextRange(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count);

        /// <summary>
        /// Release resources used by weblink feature.
        /// </summary>
        /// <param name="link_page">Handle returned by FPDFLink_LoadWebLinks.</param>
        [DllImport("pdfium.dll")]
        public static extern void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page);
    }
}